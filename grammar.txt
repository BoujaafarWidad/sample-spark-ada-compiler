Proc [DONE] {
  'procedure' Idf 'is' List_decl 'begin' List_inst 'end' Idf ';'
}

List_decl [DONE] {
  Decl List_decl_aux
}

Decl [DONE] {
  Idf ':' Decl_aux
}

Decl_aux [DONE] {
  Type Decl_aux_aux
  'constant' Type Decl_aux_aux
}

Decl_aux_aux [DONE] {
  ':=' Const ';',
  ';'
}

List_decl_aux [DONE] {
  List_decl,
  _epsilon,
  FOLLOW = {'begin'}
}

Type [DONE] {
  'Float',
  'Integer',
  'Character',
  'Boolean',
  'String',
  'Positive',
  'Natural'
}

Const [DONE] {
  Float_value,
  Integer_value,
  Character_value,
  Boolean_value,
  String_value
}

List_inst [UNCOMPLETED] {
  If_statement List_inst_aux,
  Case_statement List_inst_aux,
  Sample_inst List_inst_aux,
  Loop_statement List_inst_aux,
  _epsilon,
  FOLLOW = {'end', 'elsif', 'else', 'when'}
}

List_inst_aux [UNCOMPLETED] {
  List_inst,
  _epsilon,
  FOLLOW = {'end', 'elsif', 'else', 'when'}
}

If_statement [DONE] {
  'if' Expression 'then' List_inst Elsif_statement
}

Elsif_statement [DONE] {
  'elsif' Expression 'then' List_inst Elsif_statement,
  'else' List_inst Endif_statement,
  Endif_statement
}

Endif_statement [DONE] {
  'end' 'if' ';'
}

Expression [DONE] {
  Relation Expression_aux
}

Expression_aux [DONE] {
  'and' Relation,
  'xor' Relation,
  'or' Relation,
  _epsilon,
  FOLLOW = {'then', ')', '=>', 'is', '|', ';', 'loop'}
}

Relation [DONE] {
  Simple_expression Relation_aux
}

Relation_aux [UNCOMPLETED] {
  '=' Simple_expression,
  '/=' Simple_expression,
  '<' Simple_expression,
  '<=' Simple_expression,
  '>' Simple_expression,
  '>=' Simple_expression,
  _epsilon,
  FOLLOW = {'then', 'and', 'xor', 'or', ')', '=>', 'is', '|', ';', 'loop'}
}

Simple_expression [DONE] {
  '+' Term Simple_expression_aux,
  '-' Term Simple_expression_aux,
  Term Simple_expression_aux,
}

Simple_expression_aux [DONE] {
  '+' Term Simple_expression_aux,
  '-' Term Simple_expression_aux,
  '&' Term Simple_expression_aux,
  _epsilon,
  FOLLOW = {
    'then', 'and', 'xor', 'or', '=', '/=', '<',
    '<=', '>', '>=', ')', '=>', 'is', '|', ';', 'loop'
  }
}

Term [DONE] {
  Factor Term_aux
}

Term_aux [DONE] {
  '*' Factor Term_aux,
  '/' Factor Term_aux,
  'mod' Factor Term_aux,
  'rem' Factor Term_aux,
  _epsilon,
  FOLLOW = {
    then', 'and', 'xor', 'or', '=', '/=', '<', '<=', '>',
    '>=', '+', '/', '&', ')', '=>', 'is', '|', ';', 'loop'
  }
}

Factor [UNCOMPLETED] {
  Primary
}

Primary [UNCOMPLETED] {
  Idf,
  'null',
  String_literal,
  Integer_value,
  Float_value,
  '(' Expression ')'
}

Case_statement [DONE] {
  "case" Expression "is" Case_statement_alternative Case_statement_aux
}

Case_statement_aux [DONE] {
  Case_statement_alternative Case_statement_aux,
  'end' 'case' ';'
}

Case_statement_alternative [DONE] {
  'when' Choice_list '=>' List_inst
}

Choice_list [DONE] {
  Choise Choice_list_aux
}

Choice_list_aux [DONE] {
  '|' Choise Choice_list_aux,
  _epsilon,
  FOLLOW = {'=>'}
}

Choise [UNCOMPLETED] {
  "others",
  Expression
}

Identified_statement [DONE] {
  Idf Identified_statement_aux
}

Identified_statement_aux [UNCOMPLETED] {
  Sample_inst,
  Identified_loop_statement
}

Sample_inst [DONE] {
  ':=' Expression ';'
}

Identified_loop_statement [DONE] {
  ':' Loop_statement,
}

Loop_statement [UNCOMPLETED] {
  'while' Expression Loop_statement_aux_aux,
  Loop_statement_aux_aux
}

Loop_statement_aux [DONE] {
  'loop' List_inst 'end' 'loop' Loop_statement_aux_aux_aux
}

Loop_statement_aux_aux [DONE] {
  Idf ';',
  ';'
}